@using MvcPaging
@using StoreManagement.Data.GeneralHelper
@model Dictionary<String, String>
@{
    ViewBag.Title = "Index";
    Dictionary<String, String> outputDic = Model;
    var pageSize = outputDic["PageSize"].ToInt();
    var pageNumber = outputDic["PageNumber"].ToInt();
    var totalItemCount = outputDic["TotalItemCount"].ToInt();
    var isPagingUp = outputDic["IsPagingUp"].ToBool();
    var isPagingDown = outputDic["IsPagingDown"].ToBool();
            
}

<!-- Content
================================================== -->

<!-- Container -->
<div class="container">


    @if (isPagingUp)
    {
        <div class="pager">
            @Html.Pager(pageSize, pageNumber, totalItemCount).Options(o => o.DisplayTemplate("BootstrapPagination").MaxNrOfPages(7).AlwaysAddFirstPageNumber()
                                                                        .SetPreviousPageText("←")
                                                                        .SetNextPageText("→"))
        </div>
    
    }


    <!-- Masonry Wrapper-->
    @Html.Raw(outputDic["PageOutput"])


    @if (isPagingDown)
    {
        <div class="pager">
            @Html.Pager(pageSize, pageNumber, totalItemCount).Options(o => o.DisplayTemplate("BootstrapPagination").MaxNrOfPages(7).AlwaysAddFirstPageNumber()
                                                                        .SetPreviousPageText("←")
                                                                        .SetNextPageText("→"))
        </div>
    
    }



</div>
<!-- Container / End -->
