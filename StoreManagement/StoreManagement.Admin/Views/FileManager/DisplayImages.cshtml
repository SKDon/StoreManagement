@using GridMvc.Html
@using GridMvc.Sorting
@using StoreManagement.Data
@model IEnumerable<StoreManagement.Data.Entities.FileManager>

@{
    ViewBag.Title = "View1";
    var storeId = ViewBag.StoreId;
}


<div class="col-md-12">
    <div class="row">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="text-muted bootstrap-admin-box-title">Alerts</div>
            </div>
            <div class="bootstrap-admin-panel-content">


                <h2>Images</h2>

                <div class="panel panel-info">
                    <div class="panel-body">
                        <div class="row">
                            <div class="col-md-3">
                                @using (Html.BeginForm("UploadImages", "FileManager", FormMethod.Get))
                                {
                                    <input type="hidden" value="@storeId" name="storeId"/>
                                    <p>
                                        <input type="submit" value="Upload Images" class="btn btn-primary btn-block" />
                                    </p>
                                }
                            </div>
                            <span class="col-md-9">
                                @Html.Partial("pSearchForm")
                            </span>
                        </div>
                        <div class="row">
                            <span class="col-md-1">
                                <span class="btn btn-link btn-xs" id="SelectAll">Select All
                                </span>
                            </span>
                            <span class="col-md-1">
                                <span class="btn btn-link btn-xs" id="DeselectAll">Deselect All
                                </span>
                            </span>
                            <span class="col-md-2">
                                <span class="btn btn-link btn-xs" id="DeleteAll">Delete Selected 
                                </span>
                            </span>
                            <span class="col-md-2">
                                <select name="ItemStateSelection" id="ItemStateSelection">
                                    <option value="State">Durum</option>
                                    <option value="Carousel">Carousel</option>
                                </select>
                            </span><span class="col-md-2">
                                <span class="btn btn-link btn-xs" id="SetStateOnAll">Set Selected State True All</span>

                            </span><span class="col-md-2">
                                <span class="btn btn-link btn-xs" id="SetStateOffAll">Set Selected State False All</span>

                            </span>
                            <span class="col-md-2">
                                <span class="btn btn-link btn-xs" id="OrderingAll">Ordering All
                                </span>
                            </span>
                        </div>

                    </div>

                </div>


                <div class="panel panel-primary">
                    <div class="panel-heading">
                        <div class="row">
                            <span class="col-md-6">
                                <span class="label "><span class="badge text-danger text-large">@Model.Count() </span>


                                    Records exists  
                                </span>

                            </span>
                            <span class="col-md-3">
                                <p class=" text-right">Grid Paging Number</p>
                            </span>
                            <span class="col-md-3">
                                <select name="GridListItemSize" class="form-control dropdown-toggle" id="GridListItemSize">
                                    <option class="text-info" value="25">25</option>
                                    <option selected="selected" class="text-info" value="50">50</option>
                                    <option class="text-info" value="100">100</option>
                                    <option class="text-info" value="250">250</option>
                                    <option class="text-info" value="500">500</option>
                                    <option class="text-info" value="1000">1000</option>
                                </select>
                            </span>
                        </div>


                    </div>

                    @Html.Grid(Model).Named("FileManagerGrid").Columns(columns =>
    {

        columns.Add().Encoded(false).
            Sanitized(false).
            SetWidth(10).
            RenderValueAs(o => String.Format("<input gridkey-id='{0}'   class='gridCheckboxes'   name='checkboxGrid' type='checkbox'>", o.GoogleImageId));

        columns.Add(o => o.Id, true);

        columns.Add()
               .Encoded(false)
               .Sanitized(false)
               .SetWidth(30)
               .RenderValueAs(d =>
                   @<b>
                       @Html.ActionLink(" ", "Edit", new { id = d.Id }, new { @class = "btn btn-primary btn-sm     glyphicon glyphicon-pencil glyphicon-white" })
                   </b>);
                        
                        
        columns.Add()
                   .Encoded(false)
                   .Sanitized(false)
                   .SetWidth(30)
                   .RenderValueAs(d =>
                       @<b>
                           @Html.ActionLink(" ", "Delete", new { id = d.Id }, new { @class = "btn btn-danger btn-sm glyphicon glyphicon-remove glyphicon-white" })
                       </b>);
                        
        columns.Add(c => c.OriginalFilename).Titled("OriginalFilename").Filterable(true);
        
        columns.Add(c => c.Title).Titled("Name").Encoded(false).
                    Sanitized(false).
                    RenderValueAs(o => String.Format("<input   gridkey-id='{0}' value='{1}'  class='input-xs' type='type'>", o.Id, o.Title));
                    
        columns.Add(c => c.ContentType).Titled("ContentType").Filterable(true);

        columns.Add(o => o.Ordering).Encoded(false).
                    Sanitized(false).
                    SetWidth(10).
                    RenderValueAs(o => String.Format("<input   gridkey-id='{0}' value='{1}'  class='GridOrderingTextbox input-xs' name='gridOrdering' type='type'>", o.Id, o.Ordering));




        columns.Add(o => o.ModifiedDate)
.Titled("Date")
.Sortable(true).
RenderValueAs(o => o.ModifiedDate != null ? String.Format("{0}", o.ModifiedDate.Value.ToShortDateString()) : null)
.SortInitialDirection(GridSortDirection.Descending);



        columns.Add(o => o.State)
        .Titled("State")
        .Sortable(true)
        .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
         Sanitized(false)
        .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}' {1}   name='spanState'> </span>",
                                          o.Id, (o.State ? ProjectAppSettings.OkStyle : ProjectAppSettings.CancelStyle), o.State));




        columns.Add()
    .Encoded(false)
    .Sanitized(false)
    .SetWidth(30)
    .Titled("Carusel")
.RenderValueAs(o => String.Format("<a class='btn {1} btn-sm glyphicon   glyphicon-home'  " +
                                "data-carusel-file-id='{0}' data-carusel-file-isCarousel='{2}'></a>",
                           o.Id, (o.IsCarousel ? "btn-success" : "btn-danger"), o.IsCarousel.ToString().ToLower()));

        columns.Add()
         .Encoded(false)
         .Sanitized(false)
         .SetWidth(30)
               .Titled("Download")
         .RenderValueAs(d =>
             @<b>
                                <a class="btn btn-info btn-sm glyphicon   glyphicon-download-alt" href="@d.WebContentLink" data-file-id="@d.Id"></a>
                            </b>);


        columns.Add(c => c.WebContentLink).Titled("").Filterable(true).Sanitized(false)
            .Encoded(false).RenderValueAs(d => Html.Raw(string.Format("<text><img style='width:100%; max-width: 150px' src=\"{0}\" alt=\"Image\"/></text>",
                d.WebContentLink)).ToHtmlString());

    }).SetRowCssClasses(item => (item.Id % 2 == 0 ? "warning" : string.Empty)).SetRowCssClasses(item => String.Format("MyGrid-Row-{0}", item.Id)).WithPaging(15).Sortable().Filterable().WithMultipleFilters().Selectable(false)

                </div>


            </div>
        </div>
    </div>



</div>






@section scripts
{
    <script>
        $(function () {
            //pageGrids.imagesGrid.onRowSelect(function (e) {
            //    console.log(e.row);
            //});


        });
    </script>



}
