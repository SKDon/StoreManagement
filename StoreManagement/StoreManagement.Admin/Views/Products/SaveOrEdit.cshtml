@model StoreManagement.Data.Entities.Content

@{
    ViewBag.Title = "Create";
    Layout = "../Shared/_Layout.cshtml";
    int storeId = Model != null ? Model.StoreId : 0;
}



@Html.Partial("_LeftMenu")

<div class="col-md-10">
    <div class="row">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="text-muted bootstrap-admin-box-title">Products</div>
            </div>
            <div class="bootstrap-admin-panel-content">
                <h2>Create New Products</h2>

                @Html.Action("CreateCategoryTree", "Categories")

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)

                    <fieldset>
                        <legend>Content</legend>

                        <div class="editor-label control-group">
                            @Html.LabelFor(model => model.StoreId, new { @class = "control-label" })
                        </div>
                        <div class="editor-field controls">
                            @Html.Action("StoresDropDown", "Stores", new { storeId })
                        </div>


                        @Html.HiddenFor(model => model.Id)
                        @Html.HiddenFor(model => model.CategoryId)
                        @Html.HiddenFor(model => model.Type)
                        @Html.HiddenFor(model => model.Url)

                        <div class="editor-label">
                            @Html.LabelFor(model => model.Name)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Name)
                            @Html.ValidationMessageFor(model => model.Name)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.Description)
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.Description)
                        </div>



                        <div class="editor-field">
                            <div id="contentImages"></div>
                            <div id="existingContentImages"></div>
                            @Html.Action("ImageGallery", "FileManager")
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.MainPage)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.MainPage)
                            @Html.ValidationMessageFor(model => model.MainPage)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.State)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.State)
                            @Html.ValidationMessageFor(model => model.State)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.ImageState)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.ImageState)
                            @Html.ValidationMessageFor(model => model.ImageState)
                        </div>



                        <div class="editor-label">
                            @Html.LabelFor(model => model.Ordering)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Ordering)
                            @Html.ValidationMessageFor(model => model.Ordering)
                        </div>


                        <p>
                            <input type="submit" value="Create" />
                        </p>
                    </fieldset>
                }

                <div>
                    @Html.ActionLink("Back to List", "Index")
                </div>
            </div>
        </div>
    </div>



</div>






@section scripts {


    <script src="/Content/Theme/vendors/ckeditor/adapters/jquery.js"></script>

    <script type="text/javascript">
        $(document).ready(function () {
            console.log("jquery is workingg");
            $("#treeview").bind("select_node.jstree", function (event, data) {
                var m = $("#" + data.selected[0]).find("[data-category]");
                var selectedCategoryId = m.first().attr("data-category");
                console.log(selectedCategoryId);
                $("#CategoryId").val(selectedCategoryId);

            });

            console.log("jquery is working");
 
            GetFiles($("#Id").val());
            $('textarea#Description').ckeditor({
                height: '150px',
                toolbar: [
                    { name: 'document', items: ['Source', '-', 'NewPage', 'Preview', '-', 'Templates'] }, // Defines toolbar group with name (used to create voice label) and items in 3 subgroups.
                    ['Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo'], // Defines toolbar group without name.
                    { name: 'basicstyles', items: ['Bold', 'Italic'] }
                ]
            });

            //$("#Description").htmlarea({
            //    // Override/Specify the Toolbar buttons to show
            //    toolbar: [
            //        ["bold", "italic", "underline", "|", "forecolor"],
            //        ["p", "h1", "h2", "h3", "h4", "h5", "h6"],
            //        ["link", "unlink", "|", "image"],
            //        [{
            //            // This is how to add a completely custom Toolbar Button
            //            css: "custom_disk_button",
            //            text: "Save",
            //            action: function (btn) {
            //                // 'this' = jHtmlArea object
            //                // 'btn' = jQuery object that represents the <A> "anchor" tag for the Toolbar Button
            //                console.log('SAVE!\n\n' + this.toHtmlString());
            //            }
            //        }]
            //    ],

            //    // Override any of the toolbarText values - these are the Alt Text / Tooltips shown
            //    // when the user hovers the mouse over the Toolbar Buttons
            //    // Here are a couple translated to German, thanks to Google Translate.
            //    toolbarText: $.extend({}, jHtmlArea.defaultOptions.toolbarText, {
            //        //"bold": "fett",
            //        //"italic": "kursiv",
            //        "underline": "unterstreichen"
            //    }),

            //    // Specify a specific CSS file to use for the Editor
            //    //css: "/Content/jHtmlArea/jHtmlArea.Editor.css",

            //    // Do something once the editor has finished loading
            //    loaded: function () {
            //        //// 'this' is equal to the jHtmlArea object
            //        //alert("jHtmlArea has loaded!");
            //        //this.showHTMLView(); // show the HTML view once the editor has finished loading
            //    } 

            //});


        });

        function GetFiles(id) {

            var jsonRequest = JSON.stringify({ "contentId": id });
            console.log(jsonRequest);

            jQuery.ajax({
                url: "/Ajax/GetFiles",
                type: 'POST',
                data: jsonRequest,
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    var files = data;
                    $.each(files, function (i, file) {
                        var imageId = file.FileManagerId;
                        var fileName = file.FileManager.FileName;
                        var thumbnailLink = file.FileManager.ThumbnailLink;
                        

                        var removeLink = $("<div/>")
                                .attr("data-image-remove-link", imageId)
                                .attr("data-image-file-name", fileName)
                                .attr("data-image-file-thumnailLink", thumbnailLink)
                                .text("Remove").addClass("addLink");
                        var div = createImage(thumbnailLink, fileName, imageId, removeLink);
                        var fileHiddenLink = $('<input>').attr({
                            type: 'hidden',
                            id: 'fileId_' + imageId,
                            value: imageId,
                            name: 'selectedFileId',
                            data_selected_file: imageId
                        });

                        $("#existingContentImages").append(div);
                        $("#existingContentImages").append(fileHiddenLink);
                        bindRemoveImage();
                    });
                },
                error: function (request, status, error) {
                    console.error('Error ' + status + ' ' + request.responseText);
                },
                beforeSend: function () {

                }
            });

        }
    </script>

}