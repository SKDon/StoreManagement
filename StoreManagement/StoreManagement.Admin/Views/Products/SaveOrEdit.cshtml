@model StoreManagement.Data.Entities.Content

@{
    ViewBag.Title = "Create";
    Layout = "../Shared/_Layout.cshtml";
    int storeId = Model != null ? Model.StoreId : 0;
    String categoryType = Model.Type;
}



@Html.Partial("_LeftMenu")

<div class="col-md-10">
    <div class="row">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="text-muted bootstrap-admin-box-title">Products</div>
            </div>
            <div class="bootstrap-admin-panel-content">
                <h2>Create New Products</h2>
                <input type="hidden" value="@categoryType" id="categoryType"/>


                <div id="categoryTree">
                </div>

                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)

                    <fieldset>
                        <legend>Content</legend>

                        <div class="editor-label control-group">
                            @Html.LabelFor(model => model.StoreId, new { @class = "control-label" })
                        </div>
                        <div class="editor-field controls">
                            @Html.Action("StoresDropDown", "Stores", new { storeId })
                        </div>


                        @Html.HiddenFor(model => model.Id)

                        @Html.HiddenFor(model => model.Type)
                        @Html.HiddenFor(model => model.Url)
                        
                        
                         <div class="editor-label">
                             <b>
                                 Selected Category
                             </b>   
                        </div>
                        <div class="editor-field">
                            @Html.HiddenFor(model => model.CategoryId)
                            <span class="label label-success" id="SelectedCategory"></span>
                        </div>
                        

                        <div class="editor-label">
                            @Html.LabelFor(model => model.Name)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Name)
                            @Html.ValidationMessageFor(model => model.Name)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.Description)
                        </div>
                        <div class="editor-field">
                            @Html.TextAreaFor(model => model.Description)
                        </div>



                        <div class="editor-field">
                            <div id="contentImages"></div>
                            <div id="existingContentImages"></div>
                            @Html.Action("ImageGallery", "FileManager")
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.MainPage)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.MainPage)
                            @Html.ValidationMessageFor(model => model.MainPage)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.State)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.State)
                            @Html.ValidationMessageFor(model => model.State)
                        </div>

                        <div class="editor-label">
                            @Html.LabelFor(model => model.ImageState)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.ImageState)
                            @Html.ValidationMessageFor(model => model.ImageState)
                        </div>



                        <div class="editor-label">
                            @Html.LabelFor(model => model.Ordering)
                        </div>
                        <div class="editor-field">
                            @Html.EditorFor(model => model.Ordering)
                            @Html.ValidationMessageFor(model => model.Ordering)
                        </div>


                        <p>
                            <input type="submit" value="Create" />
                        </p>
                    </fieldset>
                }

                <div>
                    @Html.ActionLink("Back to List", "Index")
                </div>
            </div>
        </div>
    </div>



</div>






@section scripts {

    <script src="~/Scripts/jstree/jstree.js"></script>

    <script src="/Content/Theme/vendors/ckeditor/adapters/jquery.js"></script>

    <script type="text/javascript">
        $(document).ready(function() {
            console.log("jquery is workingg");
            $("#treeview").bind("select_node.jstree", function(event, data) {
                var m = $("#" + data.selected[0]).find("[data-category]");
                var selectedCategoryId = m.first().attr("data-category");
                console.log(selectedCategoryId);
                $("#CategoryId").val(selectedCategoryId);

            });
            GetCategoryTree($("#StoreId").val(), $("#categoryType").val());
            $('select#StoreDropDownId').chosen({}).change(function(event) {
                GetCategoryTree($(this).val(), $("#categoryType").val());
            });

            console.log("jquery is working");

            GetFiles($("#Id").val());
            $('textarea#Description').ckeditor({
                height: '150px',
                toolbar: [
                    { name: 'document', items: ['Source', '-', 'NewPage', 'Preview', '-', 'Templates'] }, // Defines toolbar group with name (used to create voice label) and items in 3 subgroups.
                    ['Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo'], // Defines toolbar group without name.
                    { name: 'basicstyles', items: ['Bold', 'Italic'] }
                ]
            });


        });

        function GetCategoryTree(id, categoryType) {

            var jsonRequest = JSON.stringify({ "storeId": id, "categoryType": categoryType });
            console.log(jsonRequest);

            jQuery.ajax({
                url: "/Ajax/GetCategoriesTree",
                type: 'POST',
                data: jsonRequest,
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function(data) {
                    $("#categoryTree").html(data);
                    bindcategoryTree();
                    var categoryId = $("#CategoryId").val();
                    var selectedCategory =  $('[data-category=' + categoryId + ']').text();
                    console.log(selectedCategory);
                    $("#SelectedCategory").text(selectedCategory);
                },
                error: function(request, status, error) {
                    console.error('Error ' + status + ' ' + request.responseText);
                },
                beforeSend: function() {

                }
            });

        }

        function bindcategoryTree() {
            $('[data-category]').each(function () {
                $(this).off("click");
                $(this).on("click", handleCategoryTree);
            });
        }

        function handleCategoryTree(e) {
            var caller = e.target;
            var categoryId = $(caller).attr('data-category');
            var category = $(caller).text();
            $("#SelectedCategory").text(category);
            $("#CategoryId").val(categoryId);
        }

        function GetFiles(id) {

            var jsonRequest = JSON.stringify({ "contentId": id });
            console.log(jsonRequest);

            jQuery.ajax({
                url: "/Ajax/GetFiles",
                type: 'POST',
                data: jsonRequest,
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function(data) {
                    var files = data;
                    $.each(files, function(i, file) {
                        var imageId = file.FileManagerId;
                        var fileName = file.FileManager.FileName;
                        var thumbnailLink = file.FileManager.ThumbnailLink;


                        var removeLink = $("<div/>")
                            .attr("data-image-remove-link", imageId)
                            .attr("data-image-file-name", fileName)
                            .attr("data-image-file-thumnailLink", thumbnailLink)
                            .text("Remove").addClass("addLink");
                        var div = createImage(thumbnailLink, fileName, imageId, removeLink);
                        var fileHiddenLink = $('<input>').attr({
                            type: 'hidden',
                            id: 'fileId_' + imageId,
                            value: imageId,
                            name: 'selectedFileId',
                            data_selected_file: imageId
                        });

                        $("#existingContentImages").append(div);
                        $("#existingContentImages").append(fileHiddenLink);
                        bindRemoveImage();
                    });
                },
                error: function(request, status, error) {
                    console.error('Error ' + status + ' ' + request.responseText);
                },
                beforeSend: function() {

                }
            });

        }
    </script>

}