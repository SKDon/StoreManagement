@model  StoreManagement.Data.Entities.Navigation


@{
    ViewBag.Title = "Create";
    Layout = "../Shared/_Layout.cshtml";
    int storeId = Model != null ? Model.StoreId : 0;
    
}




<div class="col-md-12">
    <div class="row">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="text-muted bootstrap-admin-box-title">Alerts</div>
            </div>
            <div class="bootstrap-admin-panel-content">


                <h2>Create</h2>

                @using (Html.BeginForm())
                {
                    @Html.ValidationSummary(true)
                    <fieldset>
                        <legend>Navigation</legend>

                        @Html.HiddenFor(model => model.Id)
                        @Html.HiddenFor(model => model.ParentId)
                        @Html.HiddenFor(model => model.CreatedDate)
                        @Html.HiddenFor(model => model.ControllerName)
                        @Html.HiddenFor(model => model.CreatedDate)
                        @Html.HiddenFor(model => model.UpdatedDate)
                        <div class="editor-label control-group">
                            @Html.LabelFor(model => model.StoreId, new { @class = "control-label" })
                        </div>
                        <div class="editor-field controls">
                            @Html.Action("StoresDropDown", "Stores", new { storeId })
                        </div>


                        <div class="editor-label control-group">
                            @Html.LabelFor(model => model.Name, new { @class = "control-label" })
                        </div>
                        <div class="editor-field controls">
                            @Html.EditorFor(model => model.Name, new { @class = "input-xlarge" })
                            @Html.ValidationMessageFor(model => model.Name)
                        </div>

                        <div class="editor-label control-group">
                            @Html.LabelFor(model => model.Modul, new { @class = "control-label" })
                        </div>
                        <div class="editor-field controls">
                            <select class="input-xlarge valid" id="Modul" name="Modul">
                            </select>
                            @Html.ValidationMessageFor(model => model.Modul)
                        </div>


                        <div class="editor-label control-group">
                            @Html.LabelFor(model => model.Static, new { @class = "control-label" })
                        </div>
                        <div class="editor-field controls">
                            @Html.EditorFor(model => model.Static, new { @class = "input-xlarge" })
                            @Html.ValidationMessageFor(model => model.Static)
                        </div>

                        <div class="editor-label control-group">
                            @Html.LabelFor(model => model.Ordering, new { @class = "control-label" })
                        </div>
                        <div class="editor-field controls">
                            @Html.EditorFor(model => model.Ordering, new { @class = "input-xlarge" })
                            @Html.ValidationMessageFor(model => model.Ordering)
                        </div>

                        <div class="editor-label control-group">
                            @Html.LabelFor(model => model.Link, new { @class = "control-label" })
                        </div>
                        <div class="editor-field controls">
                            @Html.EditorFor(model => model.Link, new { @class = "input-xlarge" })
                            @Html.ValidationMessageFor(model => model.Link)
                        </div>

                        <div class="editor-label control-group">
                            @Html.LabelFor(model => model.LinkState, new { @class = "control-label" })
                        </div>
                        <div class="editor-field controls">
                            @Html.EditorFor(model => model.LinkState, new { @class = "input-xlarge" })
                            @Html.ValidationMessageFor(model => model.LinkState)
                        </div>



                        <div class="editor-label control-group">
                            @Html.LabelFor(model => model.State, new { @class = "control-label" })
                        </div>
                        <div class="editor-field controls">
                            @Html.EditorFor(model => model.State, new { @class = "input-xlarge" })
                            @Html.ValidationMessageFor(model => model.State)
                        </div>


                        <p>
                            <input class="btn btn-success btn-block btn-lg" type="submit" value="Create" />
                        </p>
                    </fieldset>
                }

                <div>
                    @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default btn-lg btn-block" })
                </div>





            </div>
        </div>
    </div>



</div>

@section scripts
{
    <script>
        $(document).ready(function () {
            console.log("jquery is workingg");

            if ($('select#StoreDropDownId').length > 0) {
                GetStoreModuls($('select#StoreDropDownId').val());
                $('select#StoreDropDownId').chosen({}).change(function(event) {
                    GetStoreModuls($(this).val());
                });
            } else {
                GetStoreModuls($("#StoreId").val());
            }

        });

        function GetStoreModuls(id) {

            var jsonRequest = JSON.stringify({ "id": id });
            console.log(jsonRequest);

            jQuery.ajax({
                url: "/Ajax/GetStoreModuls",
                type: 'POST',
                data: jsonRequest,
                dataType: 'json',
                contentType: 'application/json; charset=utf-8',
                success: function (data) {
                    console.log(data);
                    $('select#Modul').empty();
                    $.each(data, function (value, i) {

                        $('select#Modul').append(
                                $('<option/>', {
                                    value: i.Value,
                                    html: i.Text
                                }));

                    });
                },
                error: function (request, status, error) {
                    console.error('Error ' + status + ' ' + request.responseText);
                },
                beforeSend: function () {

                }
            });

        }
    </script>

}




