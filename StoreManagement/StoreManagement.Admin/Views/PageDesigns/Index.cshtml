@model IEnumerable<StoreManagement.Data.Entities.PageDesign>
@using GridMvc.Html
@using GridMvc.Sorting
@using StoreManagement.Data
@using StoreManagement.Data.Constants;
@using StoreManagement.Data.GeneralHelper;

@{
    ViewBag.Title = "Index";
    var title = "Page Design Management";
    var gridName = "PageDesignsGrid";
    string controller = "PageDesigns";
    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? 250 : pageSizeNumber;
    var isRegularUser = User.IsInRole(StoreConstants.RoleUser);
    int storeId = Request.QueryString["storeId"].ToInt();



    bool isSuperAdmin = false;

    try
    {
        isSuperAdmin = User.Identity.IsAuthenticated && Roles.GetRolesForUser(User.Identity.Name).Contains("SuperAdmin");
    }
    catch (Exception ex)
    {

    }
}





<div class="col-md-12">
    <div class="row">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="text-muted bootstrap-admin-box-title">
                    <h4>@title</h4>
                </div>
            </div>
            <div class="bootstrap-admin-panel-content">


                <div>
                    @Html.Action("StoresFilter", "Stores", new { actionName = "Index", controllerName = controller })
                </div>


                <div class="panel panel-info">
                    <div class="panel-body">
                        <div class="row">
                            <span class="col-md-3">


                                @using (Html.BeginForm("SaveOrEdit", controller, FormMethod.Get))
                                {
                                            
                                    <input type="hidden" id="selectedStoreId" name="selectedStoreId" value="@storeId" />
                           
                                       
          
                                    <input type="hidden" name="id" value="0" />
                                    <button type="submit" class="btn btn-primary btn-block glyphicon glyphicon-plus">Create</button>
                                }



                            </span>
                            <span class="col-md-7">
                                @Html.Partial("pSearchForm")
                            </span>
                            <span class="col-md-2">


                                @using (Html.BeginForm("ExportExcel", controller, FormMethod.Get))
                                {
                                    <input type="hidden"  name="id" value="@storeId" />
                                    <button type="submit" class="btn">Export to Excel</button>
                                }
                                @using (Html.BeginForm("ImportExcel", controller, FormMethod.Post, new { EncType = "multipart/form-data" }))
                                {   
                                           <input type="hidden"  name="id" value="@storeId" />
                                        <input type="file" id="excelFile" name="excelFile" />
                                    <p style="margin-top: 20px;">
                                        <input type="submit" class="btn" value="Upload" />
                                    </p>
 
                                }



                            </span>

                        </div>
                        <div class="row">
                            <span class="col-md-1">
                                <span class="btn btn-xs btn-default " id="SelectAll">Select All
                                </span>
                            </span>


                            <span class="col-md-1">
                                <span class="btn btn-xs btn-default" id="DeselectAll">Deselect All
                                </span>
                            </span>



                            @if (!isRegularUser)
                            {
                                <span class="col-md-2">
                                    <span class="btn btn-xs btn-default" id="DeleteAll">Delete Selected 
                                    </span>
                                </span>
                                        
                            }


                            <span class="col-md-2">
                                <select name="ItemStateSelection" id="ItemStateSelection">
                                    <option value="State">Durum</option>
                                    <option value="ImageState">Resim Yayında</option>
                                    <option value="MainPage">Ana Sayfa</option>
                                </select>
                            </span><span class="col-md-2">
                                <span class="btn btn-xs btn-default" id="SetStateOnAll">Set Selected State True All</span>

                            </span><span class="col-md-2">
                                <span class="btn btn-xs btn-default" id="SetStateOffAll">Set Selected State False All</span>

                            </span>
                            <span class="col-md-2"></span>
                        </div>

                        <div id="ErrorMessagePanel" style="display: none;" class="alert alert-danger">
                            <span id="ErrorMessage"></span>
                        </div>

                    </div>

                </div>


                <div class="panel panel-primary">
                    <div class="panel-heading">
                        <div class="row">
                            <span class="col-md-6">
                                <span class="label "><span class="badge text-danger text-large">@Model.Count() </span>


                                    Records exists  
                                </span>

                            </span>
                            <span class="col-md-3">
                                <p class=" text-right">Grid Paging Number</p>
                            </span>
                            <span class="col-md-3">
                                <select name="GridListItemSize" class="form-control dropdown-toggle" id="GridListItemSize">
                                    <option class="text-info" value="25">25</option>
                                    <option selected="selected" class="text-info" value="50">50</option>
                                    <option class="text-info" value="100">100</option>
                                    <option class="text-info" value="250">250</option>
                                    <option class="text-info" value="500">500</option>
                                    <option class="text-info" value="1000">1000</option>
                                </select>
                            </span>
                        </div>


                    </div>

                    <div class="row">
                        <span class="col-md-7">

                            @Html.Grid(Model).Named(gridName).Columns(columns =>
                                {


                                    columns.Add().Encoded(false).
                                            Sanitized(false).
                                            SetWidth(10).
                                            RenderValueAs(o => String.Format("<input gridkey-id='{0}'  name='checkboxGrid' type='checkbox'>", o.Id));





                                    columns.Add(o => o.Id, true);

                                    columns.Add()
                                           .Encoded(false)
                                           .Sanitized(false)
                                           .SetWidth(30)
                                           .RenderValueAs(d =>
                                                          @<b>
                                                              @Html.ActionLink("Copy", "CopyPageDesign", new { id = d.Id }, new { @class = "btn btn-primary btn-sm    glyphicon glyphicon-asterisk" })
                                                          </b>);

                                    columns.Add()
                                           .Encoded(false)
                                           .Sanitized(false)
                                           .SetWidth(30)
                                           .RenderValueAs(d =>
                                                          @<b>
                                                              <input id="detailPageDesing" value="Design" type="button" class="btn btn-primary btn-sm glyphicon glyphicon-pencil glyphicon-white" data-page-desing-item-id="@d.Id"/>
                                                          </b>);


                                    columns.Add()
                                             .Encoded(false)
                                             .Sanitized(false)
                                             .SetWidth(30)
                                             .RenderValueAs(d =>
                                                            @<b>
                                                                <input id="detailPageDesing" value="Quick View" type="button" class="btn btn-primary btn-sm glyphicon glyphicon-pencil glyphicon-white" data-page-desing-quick-view-item-id="@d.Id"/>
                                                            </b>);



                                    columns.Add(o => o.Name)
                               .Titled("Name")
                               .Sortable(true)
                                 .Filterable(true)
                                .Sanitized(false)
                                .Encoded(false)
                               .RenderValueAs(o => String.Format("<span data-page-design-name='{0}'> {1} </span>",
                                                                 o.Id, o.Name));


                                    columns.Add(o => o.State)
                                           .Titled("State")
                                           .Sortable(true)
                                           .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
                                            Sanitized(false)
                                           .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}' {1}   name='spanState'> </span>",
                                                                             o.Id, (o.State ? ProjectAppSettings.OkStyle : ProjectAppSettings.CancelStyle), o.State));


                                    columns.Add(o => o.UpdatedDate)
                                           .Titled("UpdatedDate")
                                           .Sortable(true)
                                           .Css("gridDateClass")
                                           .RenderValueAs(o => o.UpdatedDate != null ? String.Format("{0}", o.UpdatedDate.Value.ToShortDateString()) : null)
                                           .SortInitialDirection(GridSortDirection.Descending);




                                    if (!isRegularUser)
                                    {
                                        columns.Add()
                                               .Encoded(false)
                                               .Sanitized(false)
                                               .SetWidth(30)
                                               .RenderValueAs(d =>
                                                              @<b>
                                                                  @Html.ActionLink(" ", "Delete", new { id = d.Id }, new { @class = "btn btn-danger btn-sm glyphicon glyphicon-trash glyphicon-white" })
                                                              </b>);
                                    }






                                }).SetRowCssClasses(item => String.Format("page-desing-row-{0}", item.Id)).WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)



                        </span>
                        <span class="col-md-5">
                            <b>Page Design Name :</b>


                            <input style="font-size: x-large" id="PageDesignName" style="width: 100% !important;" type="text">
                            <input class="btn btn-primary btn-lg" id="SavePageDesign" type="submit" value="Save">
                            <input class="btn btn-danger btn-lg" id="ClearPageDesign" type="submit" value="Clear">




                            <input type="hidden" id="selecedPageDesingItem" value="-1" />
                            <br />
                            <input class="btn btn-success btn-block btn-lg" id="UpdatePageDesign" type="submit" value="Update"><strong>
                                <span style="font-size: x-large" class="text-success, bg-danger" id="PageDesignMessage"></span>
                            </strong>
                            <br />


                            <textarea id="PageDesingText" rows="75" style="width: 100%; height: 100%;"></textarea>



                        </span>
                    </div>

                </div>



            </div>
        </div>
    </div>



</div>


@section scripts
{
    <script src="/Content/Theme/vendors/ckeditor/adapters/jquery.js"></script>
    <script src="~/Scripts/storeContent.js"></script>
    <script src="~/Scripts/liquid/plugin.js"></script>
    <script>

        $(document).ready(function () {


            try {

                bindPageDesingItem();
                QuickView();

                $('#PageDesingText').mouseout(function () {
                    SavePageDesing();
                });
            }
            catch (err) {
                console.error(err.message);
            }



            try {

                $('#UpdatePageDesign').click(function () {
                    SavePageDesing();
                });

            }
            catch (err) {
                console.error(err.message);
            }


            try {

                $('#SavePageDesign').click(function () {
                    var postData = JSON.stringify({ "id": 0, "storeId": $("#selectedStoreId").val(), "name": $("#PageDesignName").val(), "text": $("#PageDesingText").val() });
                    ajaxMethodCall(postData, "/Ajax/SetPageDesignText", function (data) {
                        window.location.reload();
                    });
                });

            }
            catch (err) {
                console.error(err.message);
            }


            try {


                $('#ClearPageDesign').click(function () {
                    $("#PageDesingText").val("");
                    $("#PageDesignName").val("");

                    $("#selecedPageDesingItem").val("-1");
                    SetTextMessage(" IS CLEAR...");
                });


            }
            catch (err) {
                console.error(err.message);
            }


        });
        function SavePageDesing() {
            var desingItemId = parseInt($("#selecedPageDesingItem").val());
            if (desingItemId > 0) {
                var postData = JSON.stringify({ "id": desingItemId, "storeId": $("#selectedStoreId").val(), "text": $("#PageDesingText").val(), "name": $("#PageDesignName").val() });
                ajaxMethodCall(postData, "/Ajax/SetPageDesignText", function (data) {

                    if (!isEmpty(data)) {
                        SetTextMessage(data);
                    } else {
                        SetTextMessage(" IS UPDATED...");
                        $('[data-page-design-name=' + desingItemId + ']').text($("#PageDesignName").val());
                    }

                });

            }

        }
        function SetTextMessage(message) {
            $("#PageDesignMessage").animate({ opacity: 0 }, function () {
                $(this).text($("#PageDesignName").val() + message).animate({ opacity: 1 });
            });
        }
        function QuickView() {
            $('[data-page-desing-quick-view-item-id]').each(function () {
                $(this).off("mouseover");
                $(this).on("mouseover", function (e) {
                    var caller = e.target;
                    var itemId = $(caller).attr('data-page-desing-quick-view-item-id');
                    var postData = JSON.stringify({ "id": itemId });
                    ajaxMethodCall(postData, "/Ajax/GetPageDesignText", function (data) {

                        $('[data-page-desing-quick-view-item-id]').each(function () {
                            $(this).parent().parent().parent().css({ 'background-color': "" });
                        });

                        SetTextMessage(" IS FETCHED...");
                        $("#PageDesingText").val(data.PageTemplate);
                        $("#PageDesignName").val(data.Name);
                        $("#selecedPageDesingItem").val(itemId);
                        $('[data-page-desing-quick-view-item-id=' + itemId + ']').parent().parent().parent().css({ 'background-color': "#bcf0af" });
                    });
                });
            });
        }
        function bindPageDesingItem() {
            $('[data-page-desing-item-id]').each(function () {
                $(this).off("click");
                $(this).on("click", handlePageDesingItem);
            });
        }
        function handlePageDesingItem(e) {
            var caller = e.target;
            var itemId = $(caller).attr('data-page-desing-item-id');
            var postData = JSON.stringify({ "id": itemId });
            $('[data-page-desing-item-id]').each(function () {
                $(this).parent().parent().parent().css({ 'background-color': "" });
            });
            ajaxMethodCall(postData, "/Ajax/GetPageDesignText", function (data) {
                $("#PageDesingText").val(data.PageTemplate);
                $("#PageDesignName").val(data.Name);

                $("#selecedPageDesingItem").val(itemId);

                SetTextMessage(" IS FETCHED...");
                var clonedRow = $('[data-page-desing-item-id=' + itemId + ']').parent().parent().parent().clone();
                console.log(clonedRow);
                $('.page-desing-row-' + itemId).remove();
                $(".grid-table > tbody").prepend(clonedRow[0]);
                $('[data-page-desing-item-id=' + itemId + ']').parent().parent().parent().css({ 'background-color': "#bcf0af" });
                bindPageDesingItem();
                QuickView();
            });
        }


    </script>

}
