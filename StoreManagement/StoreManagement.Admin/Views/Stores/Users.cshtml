@using GridMvc.Html
@using GridMvc.Sorting
@using StoreManagement.Data.Entities
@using StoreManagement.Data.GeneralHelper
@model List<StoreManagement.Data.Entities.UserProfile>
@{
    ViewBag.Title = "Users";
    Store s = ViewBag.Store;

    var userName = new LoginModel();
    var roles = (List<Role>)ViewBag.Roles;
    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? 50 : pageSizeNumber;
}


 
    <div class="row">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="text-muted bootstrap-admin-box-title">
                    <h4>@s.Name Users Management</h4>
                </div>

            </div>
            <div class="bootstrap-admin-panel-content">


                @using (Html.BeginForm("SaveStoreUsers", "Stores", FormMethod.Get))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    <fieldset>
                        <legend>Create User</legend>

                        <input type="hidden" name="id" value="@s.Id"/>



                        <div class="form-group">
                            @Html.LabelFor(model => userName.UserName)
                            @Html.TextBoxFor(model => userName.UserName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => userName.UserName)
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => userName.Password)
                            @Html.TextBoxFor(model => userName.Password, new { @class = "form-control" })

                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => userName.FirstName)
                            @Html.TextBoxFor(model => userName.FirstName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => userName.FirstName)
                        </div>


                        <div class="form-group">
                            @Html.LabelFor(model => userName.LastName)
                            @Html.TextBoxFor(model => userName.LastName, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => userName.LastName)
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => userName.PhoneNumber)
                            @Html.TextBoxFor(model => userName.PhoneNumber, new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => userName.PhoneNumber)
                        </div>

                        <div class="form-group">
                            <div class="a-table" style="display: table; width: 100%;">

                                @foreach (var r in roles)
                                {
                                    <div style="display: table-cell; width: 33.3333333333333%;">
                                        <div class="roleradio selected">
                                            <label>


                                                @Html.RadioButton("roleName", r.RoleName, new { @class = "form-control" }) @r.RoleName


                                            </label>

                                            <div style="padding: 5px;">
                                                @r.Description
                                            </div>
                                        </div>
                                    </div>
                                }

                            </div>
                        </div>



                        <p>


                            <input class="btn btn-success btn-lg btn-block" type="submit" value="Save" />
                        </p>
                    </fieldset>
                }

                @Html.ActionLink("Back to List", "Index", null, new { @class = "btn btn-default btn-lg btn-block" })
                <div class="panel panel-primary">
                    <div class="panel-heading">
                        <div class="row">
                            <span class="col-md-6">
                                <span class="label "><span class="badge text-danger text-large">@Model.Count() </span>
                                    Records exists  
                                </span>

                            </span>
                            <span class="col-md-3">
                                <p class=" text-right">Grid Paging Number</p>
                            </span>
                            <span class="col-md-3">
                                <select name="GridListItemSize" class="form-control dropdown-toggle" id="GridListItemSize">
                                    <option class="text-info" value="25">25</option>
                                    <option selected="selected" class="text-info" value="50">50</option>
                                    <option class="text-info" value="100">100</option>
                                    <option class="text-info" value="250">250</option>
                                    <option class="text-info" value="500">500</option>
                                    <option class="text-info" value="1000">1000</option>
                                </select>
                            </span>
                        </div>


                    </div>

                    @Html.Grid(Model).Named("userGrid").Columns(columns =>
    {


        columns.Add().Encoded(false).
            Sanitized(false).
            SetWidth(10).
            RenderValueAs(o => String.Format("<input gridkey-id='{0}'  name='checkboxGrid' type='checkbox'>", o.UserId));





        columns.Add(o => o.UserId, true);

        columns.Add()
           .Encoded(false)
           .Sanitized(false)
           .SetWidth(30)
           .RenderValueAs(d =>
               @<b>
                   @Html.ActionLink(" ", "SaveOrEdit", "Products", new { id = d.UserId }, new { @class = "btn btn-primary btn-sm     glyphicon glyphicon-pencil glyphicon-white" })
               </b>);


        columns.Add()
.Encoded(false)
.Sanitized(false)
.SetWidth(30)
.RenderValueAs(d =>
@<b>
    @Html.ActionLink(" ", "Delete", "Products", new { id = d.UserId }, new { @class = "btn btn-danger btn-sm glyphicon glyphicon-remove glyphicon-white" })
</b>);


        columns.Add(c => c.UserName)
            .Titled("UserName");

        columns.Add(c => c.FirstName)
                    .Titled("UserName");


        columns.Add(c => c.LastName)
                    .Titled("UserName");


        columns.Add(c => c.PhoneNumber)
                    .Titled("UserName");


        columns.Add(o => o.CreatedDate)
              .Titled("Date")
              .Sortable(true).
              RenderValueAs(o => String.Format("{0}", o.CreatedDate.HasValue ? o.CreatedDate.Value.ToShortDateString() : ""))
              .SortInitialDirection(GridSortDirection.Descending);



    }).SetRowCssClasses(item => item.UserId % 2 == 0 ? "warning" : string.Empty).WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters().Selectable(false)


                </div>

            </div>
        </div>
    </div>

 