@using StoreManagement.Data.Entities
@model List<Setting>
@{
    ViewBag.Title = "Settings";
    Store s = ViewBag.Store;
    Setting setting = new Setting();
    setting.StoreId = s.Id;
 
}


@Html.Partial("_LeftMenu")

<div class="col-md-10">
    <div class="row">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="text-muted bootstrap-admin-box-title">Stores Settings</div>
            </div>
            <div class="bootstrap-admin-panel-content">

                @Html.ActionLink("Back to Stores", "Index", null, new { @class = "btn btn-default" })


                <h2>@s.Name Settings</h2>
                @using (Html.BeginForm("SaveOrUpdateSetting", "Stores", FormMethod.Post))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(true)
                    <fieldset>
                        <legend>Add Settings</legend>
                        @Html.HiddenFor(r => setting.StoreId)
                        <div class="editor-label control-group">
                            @Html.LabelFor(model => setting.SettingKey, new { @class = "control-label" })
                        </div>
                        <div class="editor-field controls">
                            @Html.EditorFor(model => setting.SettingKey, new { @class = "input-xlarge" })
                            @Html.ValidationMessageFor(model => setting.SettingKey)
                        </div>

                        <div class="editor-label control-group">
                            @Html.LabelFor(model => setting.SettingValue, new { @class = "control-label" })
                        </div>
                        <div class="editor-field controls">
                            @Html.EditorFor(model => setting.SettingValue, new { @class = "input-xlarge" })
                            @Html.ValidationMessageFor(model => setting.SettingValue)
                        </div>

                        <div class="editor-label control-group">
                            @Html.LabelFor(model => setting.State, new { @class = "control-label" })
                        </div>
                        <div class="editor-field controls">
                            @Html.CheckBoxFor(model => setting.State, new { @class = "input-xlarge" })
                            @Html.ValidationMessageFor(model => setting.State)
                        </div>


                        <p>
                             <input  class="btn btn-success btn-block btn-lg" type="submit" value="Create" />
                        </p>
                    </fieldset>
                }

                <table class='table table-hover table-bordered table-striped'>
                    <tr>

                        <th>SettingKey  
                        </th>

                        <th>SettingValue  
                        </th>

                        <th>State  
                        </th>



                    </tr>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @Html.DisplayFor(modelItem => item.SettingKey)
                            </td>

                            <td>
                                <span class="jeditableSettingValue" id="@(String.Format("{0}", item.Id))">@item.SettingValue</span>
                            </td>

                            <td>
                                @Html.DisplayFor(modelItem => item.State)
                            </td>




                        </tr>
                    }
                </table>





            </div>
        </div>
    </div>



</div>










@section scripts{

    <script>

        $(document).ready(function () {
            console.log("jquery is working");
        });
        var urlSave = '@Url.Action("SaveSettingValue", "Ajax")';

        $('.jeditableSettingValue').editable(urlSave, {
            type: 'text',
            onblur: 'submit',
            cancel: 'Cancel',
            submit: 'OK',
            indicator: 'Saving...',
            callback: function (value, settings) {

            }, data: function (value, settings) {
                var decoded = $('<div/>').html(value).text();
                return decoded;
            }
        });


    </script>

}