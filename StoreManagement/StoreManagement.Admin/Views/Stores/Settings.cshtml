@using GridMvc.Html
@using GridMvc.Sorting
@using StoreManagement.Data
@using StoreManagement.Data.Entities
@using StoreManagement.Data.GeneralHelper
@model List<Setting>
@{
    ViewBag.Title = "Settings";
    Store s = ViewBag.Store;
    int pageSizeNumber = Request.QueryString["GridPageSize"].ToInt();
    pageSizeNumber = pageSizeNumber == 0 ? 50 : pageSizeNumber;
 
}

                     @Html.ActionLink("Back to List", "Index",null,new{@class="btn btn-default btn-lg btn-block"})
<div class="col-md-12">
    <div class="row">
        <div class="panel panel-default">
            <div class="panel-heading">
                <div class="text-muted bootstrap-admin-box-title">
                    <h4>@s.Name Settings</h4>
                </div>
            </div>
            <div class="bootstrap-admin-panel-content">


                <div class="panel panel-info">
                    <div class="panel-body">
                        <div class="row">
                            <span class="col-md-3">
                                @Html.ActionLink("Create", "SaveOrEditStoreSettings", "Stores", new { storeId = s.Id, settingId = 0 }, new { @class = "btn btn-primary btn-block" })
                            </span>
                            <span class="col-md-9">
                                @Html.Partial("pSearchForm")
                            </span>
                        </div>
                        <div class="row">
                            <span class="col-md-1">
                                <span class="btn btn-link btn-xs" id="SelectAll">Select All
                                </span>
                            </span>


                            <span class="col-md-1">
                                <span class="btn btn-link btn-xs" id="DeselectAll">Deselect All
                                </span>
                            </span>


                            <span class="col-md-2">
                                <span class="btn btn-link btn-xs" id="DeleteAll">Delete Selected 
                                </span>
                            </span>
                        </div>
                    </div>
                </div>

                <div class="panel panel-primary">
                    <div class="panel-heading">
                        <div class="row">
                            <span class="col-md-6">
                                <span class="label "><span class="badge text-danger text-large">@Model.Count() </span>


                                    Records exists  
                                </span>

                            </span>
                            <span class="col-md-3">
                                <p class=" text-right">Grid Paging Number</p>
                            </span>
                            <span class="col-md-3">
                                <select name="GridListItemSize" class="form-control dropdown-toggle" id="GridListItemSize">
                                    <option class="text-info" value="25">25</option>
                                    <option selected="selected" class="text-info" value="50">50</option>
                                    <option class="text-info" value="100">100</option>
                                    <option class="text-info" value="250">250</option>
                                    <option class="text-info" value="500">500</option>
                                    <option class="text-info" value="1000">1000</option>
                                </select>
                            </span>
                        </div>


                    </div>


                    @Html.Grid(Model).Named("SettingGrid").Columns(columns =>
    {
        /* Adding not mapped column, that renders body, using inline Razor html helper */

        columns.Add().Encoded(false).
           Sanitized(false).
           SetWidth(10).
           RenderValueAs(o => String.Format("<input gridkey-id='{0}'  name='checkboxGrid' type='checkbox'>", o.Id));

        columns.Add()
            .Encoded(false)
            .Sanitized(false)
            .SetWidth(30)
            .RenderValueAs(d =>
                @<b>
                    @Html.ActionLink(" ", "SaveOrEditStoreSettings", "Stores", new { storeId = s.Id, settingId = d.Id }, new { @class = "btn btn-primary btn-sm     glyphicon glyphicon-pencil glyphicon-white" })
                </b>);


        columns.Add()
                .Encoded(false)
                .Sanitized(false)
                .SetWidth(30)
                .RenderValueAs(d =>
                @<b>
                    @Html.ActionLink(" ", "DeleteStoreSettings", "Stores",
                    new { storeId = s.Id, settingId = d.Id },
                    new { @class = "btn btn-danger btn-sm glyphicon glyphicon-trash glyphicon-white", @onclick = String.Format("return confirm('Are you sure you want to delete {0}?');", d.SettingKey) })
                </b>);


        columns.Add(o => o.Id, true);
        columns.Add(c => c.Name);
        columns.Add(c => c.Description);
        columns.Add(c => c.SettingKey);

        columns.Add(o => o.SettingValue).Encoded(false).
                Sanitized(false).
                SetWidth(10).
                RenderValueAs(o => String.Format("<input   gridkey-id='{0}' value='{1}'   class='GridOrderingTextbox input-xs' name='gridTextBox' type='type'>", o.Id, o.SettingValue));


        columns.Add(o => o.State)
               .Titled("State")
               .Sortable(true)
               .SortInitialDirection(GridSortDirection.Descending).Encoded(false).
                Sanitized(false)
               .RenderValueAs(o => String.Format("<span  gridkey-id='{0}' grid-data-value='{2}' {1}   name='spanState'> </span>",
                                                 o.Id, (o.State ? ProjectAppSettings.OkStyle : ProjectAppSettings.CancelStyle), o.State));


        columns.Add(o => o.CreatedDate)
              .Titled("CreatedDate")
              .Sortable(true).
              RenderValueAs(o => String.Format("{0}", o.CreatedDate.Value.ToShortDateString()))
              .SortInitialDirection(GridSortDirection.Descending);


        columns.Add(o => o.UpdatedDate)
              .Titled("UpdatedDate")
              .Sortable(true).
              RenderValueAs(o => String.Format("{0}", o.UpdatedDate.Value.ToShortDateString()))
              .SortInitialDirection(GridSortDirection.Descending);
              
              
    }).SetRowCssClasses(item => item.Id % 2 == 0 ? "warning" : string.Empty).WithPaging(pageSizeNumber).Sortable().Filterable().WithMultipleFilters()


                </div>
            </div>
        </div>
    </div>
</div>








